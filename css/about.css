/* 
    Use the website "https://jigsaw.w3.org/css-validator/#validate_by_input", to check for errors in the code
    ALWAYS CHECK FOR ERRORS USING THE ONLINE VALIDATOR !!!
*/

/*
    Courtney Ferone - Project #1

    Design Direction:
    YOU CANNOT USE BOOTSTRAP (OR ANY FRONTEND FRAMEWORK FOR THIS PROJECT).

    All assignments must be submitted as a zip file through blackboard that contains all elements necessary (HTML, CSS, Images, etc).

    Using HTML and CSS, create a personal website for yourself. The purpose of this site will be to act as a home page and portal and 
    should show off both your HTML and CSS skills along with telling a little bit about you.

    The site should have at least 3 pages. Each page should have navigation to get between each page.

    You should use at least one CSS file that gets included in the head of every page.

    There should be an HTML form on one of the pages of your site. It can be a contact form, an order form (for a fictitious product?) 
    â€” be creative. Be sure to use at least 5 form INPUTS (input, textarea, select, etc). The form MUST validate (not all fields are 
    required to validate).

    The form has to submit the data using method GET and passthrough values on the URL upon submitting.
*/


/*

    The below line must be added to the html file to reference this stylesheet: (must be located in the <head>   </head> tag)
        <link href="css/about.css" rel="stylesheet">
        link href="css/about.css": Tell the html file to reference the directory (folder) named css and use the about.css file
        rel="stylesheet": Tell the html file the .css file is a stylesheet

*/


/* 
    Background: Set the image for our body element's background
    Background-size: Make the image span the whole page
    Margin: Remove the default margins around the body element
*/
body {
    background: url(../images/insideCastle.PNG) no-repeat center fixed; 
    background-size: cover;
    margin:0;
   }


/* 
    Opacity: Make the image mostly transparent
    Width / Height: Make the image span the entire body element box
    Position: Set this image's position absolutely (ignoring the positions of other siblings)
    Background: Places an animated overlay to cover the background
    Border-radius: Round our edges
    Margin: Remove the default margins around the animation
*/
.overlay {
    opacity: 0.3;
    width:100%;  
    height:100%;  
    position:absolute;
    background: url("../images/whiteOverlay.png");
    border-radius:20px;
    margin:0;
}


/*
    Text-align: Center our text
*/
nav {
    text-align: center;
}

/* 
    Display: Center our navigation bar
    Font-size: Increase the size of our text
    Padding: Give extra space around each navigation link (top, right, bottom, left - goes clockwise)
    Background-color: White with slight transparency
    Border-radius: Round our edges
*/
nav ul li {
    display: inline-block;
    font-size: 20px;
    padding: 10px 14px 10px 14px;
    background-color: rgba(255,255,255,0.2);
    border-radius:20px;
}

/* 
    "nav a" only targets the anchors (links) in the navigation bar   
    Text-decoration: Remove the default underline decoration
    Color: Make text white  
*/
nav a {
    text-decoration:none;
    color: white;
}
/* 
    "hover" means to add this decoration only when hovering 
    Text-decoration: Add the underline decoration back when hovering
*/
nav a:hover {
    text-decoration:underline;
  }

/*
    Width: Use only 19% of the block element's width
    Margin-left / Margin-right: Make both auto to center the element
    Color: Make text black
    Position: Make relative to it's siblings above
    Top: Move the element down from the top
*/
h1 {
    width: 19%;
    margin-left: auto;
    margin-right: auto;
    color: black;
    position: relative;
    top: 20px;
}

/* 
    Width: Use only 51% of the block element's width
    Margin-left / Margin-right: Make both auto to center the element
    Color: Make text black
    Font-size: Increase the size of our text
    Position: Make relative to it's siblings above
    Top: Move the element down from the top
    Padding-left / Padding-right: Give extra space around the paragraph on the left and right sides
    Border-left / Border-right: Create a border on the left and right sides of the paragraph
*/
.paragraph {
    width: 51%;
    margin-left: auto;
    margin-right: auto;
    color: black;
    font-size: 25px;
    position: relative; 
    top:50px;
    padding-left:18px;
    padding-right:18px;
    border-left: 1rem double;
    border-right: 1rem double;
}

/*
    Width: Use 10% of the block element's width
    Height: Use the full height of the block
*/
.horror {
    width:10%;
    height:100%;    
}

/*
    Width: Use 51% of the block element's width
    Color: Make text black
    Font-size: Increase the size of our text
    Position: Make relative to it's siblings above
    Top: Move the element down from the top
    Left: Move the element from the left to the right by this amount
*/
.favoriteHorrorMovies {
    width: 51%;
    color: black;
    font-size: 25px;
    position: relative; 
    top:100px;
    left:600px;
}

/*
    Width: Use 14% of the block element's width
    Height: Use 14% of the block element's height
*/
.moviePosters {
    width:14%;
    height:14%;
}

/*
    Width: Use 29% of the block element's width
    Color: Make text black
    Font-size: Increase the size of our text
    Position: Make relative to it's siblings above
    Top: Move the element down from the top
    Left: Move the element from the left to the right by this amount
    Background-color: White with slight transparency
    Padding-left: Give the h1 text more space on the left side
    Border-radius: Round our edges
*/
.contactFormDirect {
    width: 29%;
    color: black;
    font-size: 25px;
    position: relative; 
    top:100px;
    left:540px;
    background-color: rgba(255,255,255,0.5);
    padding-left: 13px;
    border-radius:20px;
}


/* According to "freecodecamp.org":

    As it is relative, its child elements can be set with absolute position based on it later.
    The "pageContainer" goes around everything on the page, and sets its minimum height to 100% of the viewport height (vh). 

    The "contentWrap" has a bottom padding that is the height of the footer, ensuring that exactly enough space is left for the footer 
    inside the container they are both in. A wrapping div is used here that would contain all other page content (in the .html file).

    The footer is set to absolute, sticking to the bottom: 0 of the page-container it is within. This is important, as it is not 
    absolute to the viewport, but will move down if the page-container is taller than the viewport. As stated, 
    its height, arbitrarily set to 30% here, is used in the content-wrap above it.
*/
.pageContainer {
    position: relative;
    min-height: 100vh;
  }
  .contentWrap {
    padding-bottom: 30%;    /* Footer height */
  }
/* 
    Width: Use the full width of the block
    Height: Use only 30% of the block element's height
    Position: Set this element's position absolutely (ignoring the positions of other siblings)
    Bottom / Left / Right: Make sure the footer is perfectly centered at the very bottom of the page
*/
.footer {
    width:100%;
    height:30%;
    position:absolute;
    bottom:0;
    left:0;
    right: 0;
}